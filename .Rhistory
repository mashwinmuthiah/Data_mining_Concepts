leadership[leadership$age =99] <-NA
leadership
leadership<-data.frame(manager,date,country,gender,age,q1,q2,q3,q4,q5,stringsAsFactors = FALSE)
leadership
leadership$age[leadership$age == 99] <-NA
leadership
leadership$age[leadership$age == 99] <-NA
leadership$agecat[leadership$age>75]<="Elder"
leadership$agecat[leadership$age>75]<-"Elder"
leadership%agecat[leadership$age>=55 & leadership$age<=75]<-"Middle Age"
leadership$agecat[leadership$age>=55 & leadership$age<=75]<-"Middle Age"
leadership$agecat[leadership$age <55] <-"Young"
View(leadership)
View(leadership)
library(car)
?recode()
library(doBy)
?cut()
Z <- stats::rnorm(10000)
table(cut(Z, breaks = -6:6))
z
Z
table(cut(Z, breaks = -6:6))
Z <- stats::rnorm(10)
Z
table(cut(Z, breaks = -6:6))
table(cut(Z, breaks = -1:1))
Z <- stats::rnorm(10)
Z
table(cut(Z, breaks = -1:1))
Z <- stats::rnorm(10)
Z
table(cut(Z, breaks = -1:1))
?recode()
()
()
x<-rep(1:3,3)
x
recode(x,"c(1,2)='A';else='B")
recode(x,"c(1,2)='A';else='B'")
x<-rep(1:5,3)
x
recode(x,"c(1,2)='A';else='B'")
recode(x,"c(1,3,5)='A';else='B'")
x
y<-recode(x,"c(1,3,5)='A';else='B'")
y
leadership$agecat<-recode(leadership$age,"c(75:100)='Elder';c(55:74)='Middle age';else='Young'")
leadership$agecat<-recode(leadership$age,"c(75:100)='Elder';"c(55:74)='Middle age'";"else='Young'")
leadership$agecat<-recode(leadership$age,"c(75:100)='Elder';c(55:74)='Middle age';else='Young'")
leadership$agecat<-recode(leadership$age,"c(75:100)='Elder'; c(55:74)='Middle age';else='Young'")
leadership$agecat<-recode(leadership$age,"c(75:100)='Elder';c(55:74)='Middle age';else='Young'")
leadership$agecat<-recode(leadership$age,"c(75:100)='Elder',c(55:74)='Middle age';else='Young'")
leadership$agecat<-recode(leadership$age,"c(75:100)='Elder';c(55:74)='Middle age';else='Young'")
leadership$agecat<-recode(leadership$age,"c(75:100)='Elder';c(55:74)='Middle_age';else='Young'")
c(75:100)
leadership$agecat<-recode(leadership$age,"c(75:100)='Elder';else='Young'")
leadership$agecat<-recode(leadership$age,"[c(75:100)]='Elder';else='Young'")
leadership$agecat<-recode(leadership$age,"c(75,76,77,78)='Elder';else='Young'")
a<-c(75:100)
leadership$agecat<-recode(leadership$age,"a ='Elder';else='Young'")
a
c<-c(:54)
c<-c(1:54)
b<-c(55,74)
leadership$agecat<-recode(leadership$age,"a ='Elder';b='Middle age';else='Young'")
leadership$agecat
fix(leadership)
fix(leadership)
leadership
mydate<-as.Date(c("2019-03-11","2019-03-10"))
mydate
strdate<-c("11-03-2019","10-03-2019")
mydate1<-as.Date(strdate,"%d-%m-%y")
mydate1
strdate<-c("11-03-2018","10-03-2018")
mydate1<-as.Date(strdate,"%d-%m-%y")
mydate1
mydate1<-as.Date(strdate,"%d-%m-%Y")
mydate1
sys,data()
Sys.Date()
date()
order(leadership$age)
manager<-c(1,2,3,4,5)
date<-c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country<-c("US","US","UK","UK","UK")
gender<-c("M","F","F","M","F")
age<-c(32,45,25,39,99)
q1<-c(5,3,3,3,2)
q2<-c(4,5,5,3,2)
q3<-c(5,2,5,4,1)
q4<-c(5,5,5,NA,2)
q5<-c(5,5,2,NA,1)
leadership<-data.frame(manager,date,country,gender,age,q1,q2,q3,q4,q5,stringsAsFactors = FALSE)
leadership$age[leadership$age == 99] <-NA
leadership$agecat[leadership$age>75]<-"Elder"
leadership$agecat[leadership$age>=55 & leadership$age<=75]<-"Middle Age"
leadership$agecat[leadership$age <55] <-"Young"
order(leadership$age)
leadership[order(leadership$age),]
leadership[order(leadership$age)]
?order()
leadership[order(leadership$age),1]
leadership[order(leadership$age),2]
leadership[order(leadership$age),1:11]
leadership[order(leadership$age),
leadership[order(leadership$age),]
leadership[order(leadership$age),leadership$age]
leadership[order(leadership$age),"age"]
leadership[2,1:11]
leadership[order(-leadership$age),"age"]
leadership[order(-leadership$age),"age"]
leadership[order(-leadership$age),]
mergetry<-merge(q1,q2)
mergetry
mergetry<-merge(q1,q2,by=a)
mergetry<-merge(q1,q2,by=q1)
mergetry<-cbind(q1,q2)
mergetry
mergetry<-rbind(q1,q2)
mergetry
mergetry2<-cbind(q1,q2)
mergetry2
b)
mergetry<-rbind(a,b)
a<-c(1,2,3)
b<-c(4,5)
mergetry<-rbind(a,b)
mergetry2<-cbind(a,b)
mergetry2
mergetry
append(b,6)
mergetry<-rbind(a,b)
append(b,6)
mergetry2<-cbind(a,b)
b<-append(b,6)
mergetry<-rbind(a,b)
mergetry
b<-c(4,5)
mergetry2<-cbind(a,b)
b<-c(4,5)
b<-append(b,6)
mergetry<-rbind(a,b)
mergetry
mergetry2<-cbind(a,b)
mergetry2
c<- (8,9,7)
c<- c(8,9,7)
newdata <- leadership[, c(6:10)]
newdata
newdata <- leadership[, 6:10]
newdata
newdata <- leadership[, 6:10]
newdata
newdata <- leadership[c("q1", "q2", "q3", "q4", "q5"), ]
newdata
newdata <- leadership[, 6:10]
newdata
newdata <- leadership[c("q1", "q2", "q3", "q4", "q5"), ]
newdata
newdata <- leadership[,c("q1", "q2", "q3", "q4", "q5")]
newdata
newdata <- leadership[c("q1", "q2", "q3", "q4", "q5")]
newdata
myvars <- paste("q", 1:5, sep="")
myvars
help("paste")
paste(1,2,sep = "")
newdata <- leadership[c(-8,-9)]
newdata
leadership$q3 <- leadership$q4 <- NULL
leadership
leadership<-data.frame(manager,date,country,gender,age,q1,q2,q3,q4,q5,stringsAsFactors = FALSE)
leadership$age[leadership$age == 99] <-NA
leadership$agecat[leadership$age>75]<-"Elder"
leadership$agecat[leadership$age>=55 & leadership$age<=75]<-"Middle Age"
leadership$agecat[leadership$age <55] <-"Young"
leadership
>subset()
?subset()
mysample <- leadership[sample(1:nrow(leadership), 3, replace=FALSE),]
nrow(leadership)
?subset()
mysample
library(sampling)
library(sampling)
library("sampling")
mysample <- leadership[sample(1:4, 3, replace=FALSE),]
nrow(leadership)
mysample
mysample <- leadership[sample(1:4, 3, replace=FALSE),]
nrow(leadership)
mysample
install.packages("sqldf")
library(sqldf)
newdf<=sqldf("select * from mtcats where carb=1 order by mpg")
newdf<-sqldf("select * from mtcats where carb=1 order by mpg")
newdf<-sqldf("select * from mtcars where carb=1 order by mpg")
newdf
leadership[order(,"age")]
leadership[order((leadership$age),"age")]
leadership[order(leadership$age),"age"]
nchar("ashwin")
x<-"Ashwin"
substr(x,2,4)
sunstr(x,2,4)<-222
sunstr(x,2,4)<-'222'
substr(x,2,4)<-'222'
x<-"Ashwin"
x[1]
x[1:1]
str(x)
substr(x,1,1)
x<-"ashwin"
toupper(substr(x,1,1))
x
substr(x,1,1) <= toupper(toupper(substr(x,1,1)))
x
substr(x,1,1) <- toupper(toupper(substr(x,1,1)))
xx
x
mydata<-matrix(rnorm(30),nrows = 6)
mydata<-matrix(rnorm(30),nrows = 6)
mydata<-matrix(rnorm(30),nrow = 6)
mydata
apply(mydaya,1,mean)
apply(mydata,1,mean)
round(apply(mydata,1,mean),2)
sample(1:10,1)
round(apply(mydata,1,mean,trim = 0.1),2)
round(apply(mydata,1,mean,trim = 0.2),2)
sapply(mydata, mean)
x<-sample(1:1000,50)
sapply(x, mean)
sapply(x,1:10, mean)
sapply(x,c(1:4), mean)
?sapply()
sapply(x,+1)
sapply(x,sum)
x<-list(sample(1:100,5))
sapply(x)
sapply(x,mean)
mean(x)
x<-sample(1:100,5)
mean(x)
set.seed(1234)
sapply(x,mean)
x<-list(sample(1:100,5))
sapply(x,mean)
mean(x)
x<-sample(1:100,5)
mean(x)
options(digits = 2)
roster
Student <- c("John Davis","Angela Williams","Bullwinkle Moose",
"David Jones","Janice Markhammer",
"Cheryl Cushing","Reuven Ytzrhak",
"Greg Knox","Joel England","Mary Rayburn")
math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
english <- c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)
roster <- data.frame(Student,math,science,english,
stringsAsFactors = FALSE)
roster
z<-scale(roster[,2:4])
z
score<-apply(z,1,mean)
z
score
cbind(roster,score)
roster
cbind(roster,score)
roster
cbind(roster,score)
roster
roster<-cbind(roster,score)
roster
y<-quantile(roster$score,c(0.2,0.4,0.6,0.8))
y
y<-quantile(roster$score,c(.8,.6,.4,.2)
y<-quantile(roster$score,c(.8,.6,.4,.2))
y
y<-quantile(roster$score,c(.8,.6,.4,.2))
y
roster$grade[roster$score>=y[1]]<="A"
roster$grade[roster$score>=y[1]]<="A"
roster$grade[roster$score<y[1]&roster$score>=y[2]]<="B"
roster$grade[roster$score<y[2]&roster$score>=y[3]]<="C"
roster$grade[roster$score<y[3]&roster$score>=y[4]]<="D"
roster$grade[roster$score<y[4]]<="F"
roster
roster$grade[roster$score>=y[1]]<="A"
roster$grade[roster$score>=y[1]]<-"A"
roster$grade[roster$score<y[1]&roster$score>=y[2]]<-"B"
roster$grade[roster$score<y[2]&roster$score>=y[3]]<-"C"
roster$grade[roster$score<y[3]&roster$score>=y[4]]<-"D"
roster$grade[roster$score<y[4]]<-"F"
roster
strsplit(roster$Student," ")
name <-strsplit(roster$Student," ")
name <-strsplit(roster$Student," ")
name
firstname<-sapply(name, "[",1)
firstname<-sapply(name, "[",1)
lastname<-sapply(name,"[",2)
roster<-cbind(firstname,lastname,roster[,-1])
roster
roster<-order(roster$firstname,roster$lastname)
roster
Student <- c("John Davis","Angela Williams","Bullwinkle Moose",
"David Jones","Janice Markhammer",
"Cheryl Cushing","Reuven Ytzrhak",
"Greg Knox","Joel England","Mary Rayburn")
math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
english <- c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)
roster <- data.frame(Student,math,science,english,
stringsAsFactors = FALSE)
options(digits = 2)
roster
z<-scale(roster[,2:4])
z
score<-apply(z,1,mean)
score
roster<-cbind(roster,score)
roster
y<-quantile(roster$score,c(.8,.6,.4,.2))
y
roster$grade[roster$score>=y[1]]<-"A"
roster$grade[roster$score<y[1]&roster$score>=y[2]]<-"B"
roster$grade[roster$score<y[2]&roster$score>=y[3]]<-"C"
roster$grade[roster$score<y[3]&roster$score>=y[4]]<-"D"
roster$grade[roster$score<y[4]]<-"F"
roster
name <-strsplit(roster$Student," ")
name
firstname<-sapply(name, "[",1)
lastname<-sapply(name,"[",2)
roster<-cbind(firstname,lastname,roster[,-1])
roste
roster
roster[order(lastname,firstname),]
for (i in 1:10) print("Helo")
for (i in 1:10) print("Hello")
i <-10
while (i>0) {print("hello");i<-1-1}
while (i>0) {print("hello");i<-i-1}
while (i>0) {print("hello");i<-i-1}
i <-10
while (i>0) {print("hello");i<-i-1}
mystats<-function(x,prametric=TRUE,print = FALSE){
if(parametric){
center<-mean(x);spread<-sd(d)
}else{center<-median(x);spread<-mad(x)
}
if(print&parametric){
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & !parametric) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
results<=list(center = center,spread = spread)
return(results)
}
x<-rnorn(500)
x<-rnorm(500)
y<-mystats(x)
mystats<-function(x,prametric=TRUE,print = FALSE){
if(parametric){
center<-mean(x);spread<-sd(d)
}else{center<-median(x);spread<-mad(x)
}
if(print&parametric){
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & !parametric) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
results<=list(center = center,spread = spread)
return(results)
}
y<-mystats(x)
mystats<-function(x,parametric=TRUE,print = FALSE){
if(parametric){
center<-mean(x);spread<-sd(d)
}else{center<-median(x);spread<-mad(x)
}
if(print&parametric){
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & !parametric) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
results<=list(center = center,spread = spread)
return(results)
}
y<-mystats(x)
if(parametric){
center<-mean(x);spread<-sd(x)
}else{center<-median(x);spread<-mad(x)
}
mystats<-function(x,parametric=TRUE,print = FALSE){
if(parametric){
center<-mean(x);spread<-sd(x)
}else{center<-median(x);spread<-mad(x)
}
if(print&parametric){
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & !parametric) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
results<=list(center = center,spread = spread)
return(results)
}
y<-mystats(x)
results<-list(center = center,spread = spread)
mystats<-function(x,parametric=TRUE,print = FALSE){
if(parametric){
center<-mean(x);spread<-sd(x)
}else{center<-median(x);spread<-mad(x)
}
if(print&parametric){
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & !parametric) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
results<-list(center = center,spread = spread)
return(results)
}
x<-rnorm(500)
y<-mystats(x)
y
y$center
y <- mystats(x, parametric=FALSE, print=TRUE)
y
mydate<-function(type="long") {
switch(type,long = format(Sys.time(),"%A %B %d %Y"),
short = format(sys.time(),"%m-%d-%y",
cat(type,"is not recoganized type\n"))
)
}
mydate("long")
mydate("oko")
mydate("short")
switch(type,long = format(Sys.time(),"%A %B %d %Y"),
short = format(Sys.time(),"%m-%d-%y",
cat(type,"is not recoganized type\n"))
)
mydate("short")
mydate<-function(type="long") {
switch(type,long = format(Sys.time(),"%A %B %d %Y"),
short = format(Sys.time(),"%m-%d-%y",
cat(type,"is not recoganized type\n"))
)
}
mydate("short")
switch(type,long = format(Sys.time(),"%A %B %d %Y"),
short = format(Sys.time(),"%m-%d-%y"),
cat(type,"is not recoganized type\n"))
mydate("short")
switch(type,long = format(Sys.time(),"%A %B %d %Y"),
short = format(Sys.time(), "%m-%d-%y"),
cat(type,"is not recoganized type\n"))
mydate<-function(type="long") {
switch(type,long = format(Sys.time(),"%A %B %d %Y"),
short = format(Sys.time(), "%m-%d-%y"),
cat(type,"is not recoganized type\n"))
}
mydate("short")
mydate("oko")
>warning()
warning()
?warning()
mydate<-function(type="long") {
warning("testing")
switch(type,long = format(Sys.time(),"%A %B %d %Y"),
short = format(Sys.time(), "%m-%d-%y"),
cat(type,"is not recoganized type\n"))
}
mydate("long")
mydate<-function(type="long") {
message("hi")
switch(type,long = format(Sys.time(),"%A %B %d %Y"),
short = format(Sys.time(), "%m-%d-%y"),
cat(type,"is not recoganized type\n"))
}
mydate("short")
?mtcars
cars<-mtcars
cars<-mtcars[1:4,1:4]
t(cars)
mtcars[1:4,1:4]
agdata<-aggregate(cars,cars$mpg,cars$cyl,mean)
agdata<-aggregate(cars,by=lisT(cars$mpg,cars$cyl),mean)
agdata<-aggregate(cars,by=list(cars$mpg,cars$cyl),mean)
agdata
install.packages("reshape2")
mydata <- read.table(header=TRUE, sep=" ", text="
ID Time X1 X2
1 1 5 6
1 2 3 5
2 1 6 1
2 2 2 4
")
md<-melt(mydata,id=c("ID","Time"))
library(reshape2)
md<-melt(mydata,id=c("ID","Time"))
dcast(md, ID~variable, mean)
dcast(md, ID~variable)
dcast(md, ID+Time~variable)
dcast(md, ID+variable~Time)
md
dcast(md, ID+Time~variable)
dcast(md, ID+variable~Time)
