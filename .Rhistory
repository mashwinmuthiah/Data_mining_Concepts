housing.df<-read.csv("C:\\Users\\ashwi\\Desktop\\R\\DMBA-R-datasets\\DMBA-R-datasets\\bostonhousing.csv")
housing.df<-read.csv("C:\\Users\\ashwi\\Desktop\\R\\DMBA-R-datasets\\DMBA-R-datasets\\bostonhousing.csv",header = TRUE)
head(housing.df)
## line chart for the Amtrak data
Amtrak.df <- read.csv("C:\\Users\\ashwi\\Desktop\\R\\DMBA-R-datasets\\DMBA-R-datasets\\Amtrak.csv")
## line chart for the Amtrak data
Amtrak.df <- read.csv("C:\\Users\\ashwi\\Desktop\\R\\DMBA-R-datasets\\DMBA-R-datasets\\Amtrak.csv",header = TRUE)
## line chart for the Amtrak data
Amtrak.df <- read.csv("C:\\Users\\ashwi\\Desktop\\R\\DMBA-R-datasets\\DMBA-R-datasets\\Amtrak-data.csv",header = TRUE)
# use time series analysis
library(forecast)
# use time series analysis
library(forecast)
install.packages("forecast")
# use time series analysis
library(forecast)
ridership.ts <- ts(Amtrak.df$Ridership, start = c(1991, 1), end = c(2004, 3), freq = 12)
plot(ridership.ts, xlab = "Year", ylab = "Ridership (in 000s)", ylim = c(1300, 2300))
## Boston housing data
housing.df <- read.csv("BostonHousing.csv")
## scatter plot with axes names
plot(housing.df$MEDV ~ housing.df$LSTAT, xlab = "MDEV", ylab = "LSTAT")
# alternative plot with ggplot
library(ggplot2)
ggplot(housing.df) + geom_point(aes(x = LSTAT, y = MEDV), colour = "navy", alpha = 0.7)
## barchart of CHAS vs. mean MEDV
# compute mean MEDV per CHAS = (0, 1)
data.for.plot <- aggregate(housing.df$MEDV, by = list(housing.df$CHAS), FUN = mean)
names(data.for.plot) <- c("CHAS", "MeanMEDV")
barplot(data.for.plot$MeanMEDV, names.arg = data.for.plot$CHAS,
xlab = "CHAS", ylab = "Avg. MEDV")
# alternative plot with ggplot
ggplot(data.for.plot) + geom_bar(aes(x = CHAS, y = MeanMEDV), stat = "identity")
## barchart of CHAS vs. % CAT.MEDV
data.for.plot <- aggregate(housing.df$CAT..MEDV, by = list(housing.df$CHAS), FUN = mean)
names(data.for.plot) <- c("CHAS", "MeanCATMEDV")
barplot(data.for.plot$MeanCATMEDV * 100, names.arg = data.for.plot$CHAS,
xlab = "CHAS", ylab = "% of CAT.MEDV")
dfw<-read.csv("C:\Users\ashwi\Desktop\Ashwin\PS_DS\psds_data\airline_delay_causes")
dfw<-read.csv("C:\\Users\\ashwi\\Desktop\\Ashwin\\PS_DS\\psds_data\\airline_delay_causes")
dfw<-read.csv("C:\\Users\\ashwi\\Desktop\\Ashwin\\PS_DS\\psds_data\\airline_delay_causes")
dfw<-read.csv("C:\\Users\\ashwi\\Desktop\\Ashwin\\PS_DS\\psds_data\\airline_delay_causes.csv")
barplot(as.matrix(dfw)/6,cex.axis=0.5)
barplot(as.matrix(dfw)/6, cex.axis=.5)
sp500_px <- read.csv('C:\\Users\\ashwi\\Desktop\\Ashwin\\PS_DS\\psds_data\\sp500_px.csv')
sp500_sym <- read.csv('C:\\Users\\ashwi\\Desktop\\Ashwin\\PS_DS\\psds_data\\sp500_sym.csv', stringsAsFactors = FALSE)
read.csv("C:\\Users\\ashwi\\Desktop\\Ashwin\\PS_DS\\psds_data\\k_tax.csv")
read.csv("C:\\Users\\ashwi\\Desktop\\Ashwin\\PS_DS\\psds_data\\kc_tax.csv")
kc_tax<-read.csv("C:\\Users\\ashwi\\Desktop\\Ashwin\\PS_DS\\psds_data\\kc_tax.csv")
kc_tax0<-subset(kc_tax,TaxAssessedValue < 750000 & SqFtTotLiving>100 & SqFtTotLiving<3500)
length(kc_tax0)
kc_tax0
nrow(kc_tax0)
ncol(kc_tax0)
ncol(kc_tax0)
a<-kc_tax(TaxAssessedValue < 750000 & SqFtTotLiving>100 & SqFtTotLiving<3500)
a<-kc_tax(kc_tax$TaxAssessedValue < 750000 & kc_tax$SqFtTotLiving>100 & kc_tax$SqFtTotLiving<3500)
a<-kc_tax(kc_tax$TaxAssessedValue < "750000" & kc_tax$SqFtTotLiving>"100" & kc_tax$SqFtTotLiving<"3500")
a<-kc_tax[kc_tax$TaxAssessedValue < "750000" & kc_tax$SqFtTotLiving>"100" & kc_tax$SqFtTotLiving<"3500"]
a<-Kc_tax[kc_tax$TaxAssessedValue < "750000" & kc_tax$SqFtTotLiving>"100" & kc_tax$SqFtTotLiving<"3500"]
a<-kc_tax[kc_tax$TaxAssessedValue < "750000" & kc_tax$SqFtTotLiving>"100" & kc_tax$SqFtTotLiving<"3500"]
a<- kc_tax [kc_tax$TaxAssessedValue < "750000" & kc_tax$SqFtTotLiving>"100" & kc_tax$SqFtTotLiving<"3500"]
ncol(kc_tax0)
library(ggplot2)
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) + stat_binhex(colour="white") + theme_bw() + scale_fill_gradient(low="white", high="black") + labs(x="Finished Square Feet", y="Tax Assessed Value")
install.packages("hexbin")
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) + stat_binhex(colour="white") + theme_bw() + scale_fill_gradient(low="white", high="black") + labs(x="Finished Square Feet", y="Tax Assessed Value")
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue)))
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) +  stat_binhex(colour="white") + theme_bw() + scale_fill_gradient(low="white", high="black") + labs(x="Finished Square Feet", y="Tax Assessed Value")
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) +  stat_binhex(colour="white")
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue)))
stat_binhex(colour="white")
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) +  stat_binhex(colour="white")
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) +  stat_binhex(colour="white") + theme_bw()
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) +  stat_binhex(colour="white")
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) +  stat_binhex(colour="white")  + scale_fill_gradient(low="white", high="black")
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) +  stat_binhex(colour="white")  +theme_bw()+ scale_fill_gradient(low="white", high="black")
ggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) +  stat_binhex(colour="white")  +theme_bw()+ scale_fill_gradient(low="white", high="red")
x <- rnorm(20000)
y <- rnorm(20000)
hbin <- hexbin(x,y, xbins = 40)
plot(hbin)
x <- kc_tax0$SqFtTotLiving
y <- kc_tax0$TaxAssessedValue
hbin <- hexbin(x,y, xbins = 40)
plot(hbin)
ggplot(kc_tax0, aes(SqFtTotLiving, TaxAssessedValue)) +
theme_bw() +
geom_point( alpha=0.1) +
geom_density2d(colour="white") +
labs(x="Finished Square Feet", y="Tax Assessed Value")
ggplot(kc_tax0, aes(SqFtTotLiving, TaxAssessedValue)) + theme_bw() + geom_point( alpha=0.1) + geom_density2d(colour="white") + labs(x="Finished Square Feet", y="Tax Assessed Value")
ggplot(kc_tax0, aes(SqFtTotLiving, TaxAssessedValue)) + theme_bw() + geom_point( alpha=0.1) + geom_density2d(colour="white") + labs(x="Finished Square Feet", y="Tax Assessed Value")
ctor<- contour(x,y)
ctor<- contour(x,y,alpha=0.1)
ggplot(kc_tax0, aes(SqFtTotLiving, TaxAssessedValue)) +
theme_bw() +
geom_point( alpha=0.1) +
geom_density2d(colour="white") +
labs(x="Finished Square Feet", y="Tax Assessed Value")
boxplot(pct_delay ~ airline, data=airline_stats, ylim=c(0, 50))
boxplot(pct_delay ~ airline, data=airline_stats, ylim=c(0, 50))
airline<-read.csv("C:\\Users\\ashwi\\Desktop\\Ashwin\\PS_DS\\psds_data\\airline_stats.csv")
boxplot(pct_delay ~ airline, data=airline_stats, ylim=c(0, 50))
boxplot(pct_delay = airline, data=airline_stats, ylim=c(0, 50))
boxplot(data=airline_stats, ylim=c(0, 50))
boxplot(data=airline_stats.csv, ylim=c(0, 50))
ggplot(kc_tax0,zipcode %in% c((98188, 98105, 98108, 98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue))+stat_bin_hex(color ='white') +theme_bw()+scale_fill_gradient(low = "white",high = "red")
ggplot(kc_tax0,zipcode %in% c((98188,98105,98108,98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue))+stat_bin_hex(color ='white') +theme_bw()+scale_fill_gradient(low = "white",high = "red")
ggplot(subset(kc_tax0, ZipCode %in% c(98188, 98105, 98108, 98126)),
aes(x=SqFtTotLiving, y=TaxAssessedValue)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
labs(x="Finished Square Feet", y="Tax Assessed Value") +
facet_wrap("ZipCode")
ggplot2(subset(kc_tax0, ZipCode %in% c(98188, 98105, 98108, 98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue)) +stat_binhex(colour="white") +theme_bw() +scale_fill_gradient( low="white", high="blue") +facet_wrap("ZipCode")
library(ggplot)
library(ggplot2)
ggplot(subset(kc_tax0, ZipCode %in% c(98188, 98105, 98108, 98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue)) +stat_binhex(colour="white") +theme_bw() +scale_fill_gradient( low="white", high="blue") +facet_wrap("ZipCode")
ggplot(kc_tax0,zipcode %in% c((98188,98105,98108,98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue))+stat_bin_hex(color ='white') +theme_bw()+scale_fill_gradient(low = "white",high = "red")
ggplot(subset(kc_tax0,zipcode %in% c((98188,98105,98108,98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue))+stat_bin_hex(color ='white') +theme_bw()+scale_fill_gradient(low = "white",high = "red")
library(ggplot2)
ggplot(subset(kc_tax0,zipcode %in% c((98188,98105,98108,98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue))+stat_bin_hex(color ='white') +theme_bw()+scale_fill_gradient(low = "white",high = "red")
ggplot(subset(kc_tax0,zipcode %in% c((98188,98105,98108,98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue))+stat_bin_hex(color ='white') +theme_bw()+scale_fill_gradient(low = "white",high = "red")
ggplot(subset(kc_tax0,ZipCode %in% c(98188, 98105, 98108, 98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue)) +stat_binhex(colour="white") +theme_bw() +scale_fill_gradient( low="white", high="blue") +facet_wrap("ZipCode")
ggplot(subset(kc_tax0,zipcode %in% c(98188,98105,98108,98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue))+stat_bin_hex(color ='white') +theme_bw()+scale_fill_gradient(low = "white",high = "red")
ggplot(subset(kc_tax0,zipcode %in% c(98188,98105,98108,98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue))+stat_bin_hex(color ='white') +theme_bw()+scale_fill_gradient(low = "white",high = "red") + facet_wrap("ZipCode")
98188, 98105, 98108, 98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue)) +stat_binhex(colour="white") +theme_bw() +scale_fill_gradient( low="white", high="blue") +facet_wrap("ZipCode")
library(ggplot2)
ggplot(subset(kc_tax0,ZipCode %in% c(98188, 98105, 98108, 98126)),aes(x=SqFtTotLiving, y=TaxAssessedValue)) +stat_binhex(colour="white") +theme_bw() +scale_fill_gradient( low="white", high="blue") +facet_wrap("ZipCode")
install.packages('IRkernel')
IRkernel::installspec()
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE)
install.packages(c('repr','IRdisplay','crayon','pbdZMQ','devtools'))
install.packages(c("repr", "IRdisplay", "crayon", "pbdZMQ", "devtools"))
install.packages(c("repr", "IRdisplay", "crayon", "pbdZMQ", "devtools"))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
install.packages('IRkernel')
install.packages("IRkernel")
IRkernel::installspec()
IRkernel::installspec(name = 'ir33', displayname = 'R 3.3')
IRkernel::installspec(name = 'ir32', displayname = 'R 3.2')
IRkernel::installspec()
IRkernel::installspec(user=FALSE)
conda install -c r r-irkernel
library(readr)
Vertebral_Column_Data <- read_csv("C:/Users/ashwi/Desktop/Ashwin/Making_sense_of_data/IE7275 working/Vertebral Column Data.csv")
View(Vertebral_Column_Data)
v <- Vertebral_Column_Data
fa.parallel(v,fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
v <- Vertebral_Column_Data
library(psych)
fa.parallel(v,fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[,],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[,-1],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
v <- Vertebral_Column_Data
library(psych)
fa.parallel(v[,-1],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[1,4],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[1,5],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
v <- Vertebral_Column_Data
View(v)
fa.parallel(v[,6],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[,-1],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[,-2],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[,-5],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[,-6],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[,-67,fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[,-7,fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
fa.parallel(v[,-7],fa="pc",n.iter = 100,show.legend = FALSE,main = "scree plot")
v[,1]
v[,-1]
v[,-2]
v[,-7]
cmdscale(v)
cmdscale(v[,-7])
cmdscale(v)
cmdscale(v[,-])
cmdscale(v[,-7])
cmdscale(v[,-7], k = 2, eig = FALSE, add = FALSE, x.ret = FALSE,
list. = eig || add || x.ret)
cmdscale(v[,-7], k = 2, eig = FALSE, add = FALSE, x.ret = FALSE)
cmdscale(v[,-7])
pc<-principal(v[,-7],nfactors = 1)
cmdscale(pc)
pc
cmdscale(pc[,-1])
cmdscale(pc)
rc<-principal(r=v[,-7],nfactors = 2,rotate = "varimax")
rc
cmdscale(pc)
cmdscale(rc)
cmdscale(pc)
Student <- c("John Davis","Angela Williams","Bullwinkle Moose",
"David Jones","Janice Markhammer",
"Cheryl Cushing","Reuven Ytzrhak",
"Greg Knox","Joel England","Mary Rayburn")
math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
english <- c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)
roster <- data.frame(Student,math,science,english,stringsAsFactors = FALSE
)
roster
roster <- data.frame(Student,math,science,english,
stringsAsFactors = FALSE)
c<-(1,2,3,4,5,6,7,8)
x<-c(1,2,3,4,5,6,7,8)
mean(x)
sd(x)
sd(x,na.rm = TRUE,trim = 0.5)
sd(x,trim = 0.5,na.rm = TRUE)
mean(x,trim = 0.5,na.rm = TRUE)
sd(x)
round(sd(x))
floor(sd(x))
cealing(sd(x))
ceiling(sd(x))
sd(x)
set.seed(1234)
runif(5)
library(MASS)
mean <- c(230.7, 146.7, 3.6)
sigma <- matrix( c(15360.8, 6721.2, -47.1,
6721.2, 4700.9, -16.5,
-47.1,  -16.5,   0.3), nrow=3, ncol=3)
set.seed(1234)
mydata <- mvrnorm(500, mean, sigma)
mydata
?mvrnorm
mydata[1]
mydata[mean[1]]
mean[mydata$1]
mean[mydata[,1]]
mean[mydata[:,1]]
mydata[1:]
mydata[:]
mydata[,]
mydata[,1]
mean(mydata[,1])
mydata<- as.data.frame(mydata)
names(mydata)<-c(x,y,z)
apply(mydata,1,mean)
array
?apply()
?pretty
x<-pretty(c(3,3),30)
x
x<-pretty(1,30)
x
x<-pretty(c(3,3),30)
mean(x)
y<-dnorm(x)
plot(x,y)
plot(x,y,type = l)
x<-pretty(c(3,3),30)
y<-dnorm(x)
plot(x,y,type = "l")
x<-pretty(c(-3,3),30)
y<-dnorm(x)
plot(x,y,type = "l")
x
count(x)
y
y<-dnorm(x)
length(x)
x <- c("ab", "cde", "fghij")
nchar(x)
length(x)
install.packages("caret")
library(caret)
install.packages("lattice")
library(lattice)
install.packages("ggplot2")
install.packages("rpart")
install.packages("rattle")
install.packages("tree")
install.packages("gmodels")
install.packages("RColorBrewer")
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(tree)
library(gmodels)
library(RColorBrewer)
install.packages("lattice")
install.packages("rpart")
install.packages("ggplot2")
install.packages("ggplot2")
setwd("C:/Users/ashwi/Desktop/Ashwin/Data_mining_Concepts")
TC<-read.csv("ToyotaCorolla.csv")
TC<-read.csv("ToyotaCorolla.xlsx")
View(TC)
TC<-read.csv("ToyotaCorolla_csv_data.csv")
View(TC)
str(TC)
TC<-TC[,-1]
install.packages("fastDummies")
castDummies::dummy_cols(TC$Fuel_Type)
fcastDummies::dummy_cols(TC$Fuel_Type)
fastDummies::dummy_cols(TC$Fuel_Type)
fastDummies::dummy_cols(TC$Fuel_Type)[1]
fastDummies::dummy_cols(TC$Fuel_Type)[2]
dummies<-fastDummies::dummy_cols(TC$Fuel_Type)[2]
dummies<-fastDummies::dummy_cols(TC$Fuel_Type)
dummies
dummies[4]
view(dummies[4])
str(dummies[4])
str(dummies[3])
TC$Petrol<-dummies[3]
TC$Diesel<-dummies[2]
view(TC)
View(TC)
TC$CNG<-dummies[4]
TC$Petrol
TC<-TC[,-7]
TC<-TC[1:1436,]
#Creating dummy variables for ‘Color’
dummies_col<-fastDummies::dummy_cols(TC$Color)
dummies_col
dummies_col.head()
head(dummies_col)
head(dummies_col[1])
head(dummies_col[2])
head(dummies_col[3])
head(dummies_col[4])
head(dummies_col[5])
head(dummies_col[6])
head(dummies_col[7])
TC$Red<-idummies_col[7]
head(dummies_col[8])
head(dummies_col[9])
head(dummies_col[10])
head(dummies_col[11])
head(dummies_col[12])
head(dummies_col)
TC$Beige<-dummies_col[11]
TC$Black<-dummies_col[4]
TC$Blue<-dummies_col[2]
TC$Green<-dummies_col[8]
TC$Grey<-dummies_col[6]
TC$Silver<-dummies_col[3]
TC$Red<-dummies_col[7]
TC$Violet<-dummies_col[10]
TC$White<-dummies_col[5]
TC$Yellow<-dummies_col[9]
TC<-TC[,-9]                      #Removing original predictor ‘Color’
#Partitioning into training, validation and test data
set.seed(111)
train.index<-sample(row.names(TC),0.5*dim(TC)[1])
traindf<-TC[train.index,]
rem.index<-setdiff(row.names(TC),train.index)
remdf<-TC[rem.index,]
valid.index<-sample(row.names(remdf),0.3*dim(TC)[1])
validdf<-TC[valid.index,]
test.index<-setdiff(row.names(remdf),valid.index)
testdf<-TC[test.index,]
#Running a regression tree:
#(a)	Age_08_04, HP & KM are the three important car specifications
RT1<-rpart(Price~Age_08_04+KM+CNG+Diesel+Petrol+HP+Automatic+Doors+
Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+
CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf,
method="anova",control = rpart.control(maxdepth = 3))
head(traindf)
#Running a regression tree:
#(a)	Age_08_04, HP & KM are the three important car specifications
RT1<-rpart(Price~Age_08_04+KM+.data_CNG+Diesel+Petrol+HP+Automatic+Doors+
Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+
CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf,
method="anova",control = rpart.control(maxdepth = 3))
#Running a regression tree:
#(a)	Age_08_04, HP & KM are the three important car specifications
RT1<-rpart(Price~Age_08_04+KM+CNG.data_CNG+Diesel+Petrol+HP+Automatic+Doors+
Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+
CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf,
method="anova",control = rpart.control(maxdepth = 3))
#Running a regression tree:
#(a)	Age_08_04, HP & KM are the three important car specifications
RT1<-rpart(Price~Age_08_04+KM+CNG+Petrol+HP+Automatic+Doors+
Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+
CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf,
method="anova",control = rpart.control(maxdepth = 3))
traindf<-as.data.frame(traindf)
#Running a regression tree:
#(a)	Age_08_04, HP & KM are the three important car specifications
RT1<-rpart(Price~Age_08_04+KM+CNG+Petrol+HP+Automatic+Doors+
Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+
CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf,
method="anova",control = rpart.control(maxdepth = 3))
#Running a regression tree:
#(a)	Age_08_04, HP & KM are the three important car specifications
RT1<-rpart(Price~Age_08_04+KM+unlist(CNG)+Petrol+HP+Automatic+Doors+
Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+
CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf,
method="anova",control = rpart.control(maxdepth = 3))
#Running a regression tree:
#(a)	Age_08_04, HP & KM are the three important car specifications
RT1<-rpart(Price~Age_08_04+KM+unlist(CNG)+unlist(Petrol)+HP+Automatic+Doors+
Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+
CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf,
method="anova",control = rpart.control(maxdepth = 3))
printcp(RT1)
summary(RT1)
#Displaying the Regression tree:
prp(RT1, type = 1, extra = 1, split.font = 1, varlen = -10)
plotcp(RT1)
#Running training, validation and test datasets and calculating the error for each
RT1.pred<-predict(RT1,traindf,type="vector")
RT1.valid<-predict(RT1,validdf,type="vector")
RMSE(RT1.pred,traindf$Price)
RMSE(RT1.valid,validdf$Price)
RT1.test<-predict(RT1,testdf,type="vector")
RMSE(RT1.test,testdf$Price)
#Plotting boxplot for errors:
par(mfrow=c(1,3))
boxplot(RT1.pred-traindf$Price,main="Boxplot for training data error")
boxplot(RT1.valid-validdf$Price,main="Boxplot for validation data error")
boxplot(RT1.test-testdf$Price,main="Boxplot for test data error")
#Cross-validation Procedure
RT1.cv<-rpart(Price~Age_08_04+KM+CNG+Diesel+Petrol+HP+Automatic+Doors+
Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+
CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf,method="anova",cp=0.00001,minsplit=2,xval=5)
#Cross-validation Procedure
RT1.cv<-rpart(Price~Age_08_04+KM+unlist(CNG)+Diesel+Petrol+HP+Automatic+Doors+
Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+
CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf,method="anova",cp=0.00001,minsplit=2,xval=5)
#Cross-validation Procedure
RT1.cv<-rpart(Price~Age_08_04+KM+unlist(CNG)+unlist(Diesel)+unlist(Petrol)+HP+Automatic+Doors+
Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+
CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf,method="anova",cp=0.00001,minsplit=2,xval=5)
printcp(RT1.cv)
#Pruning the tree
RT1.pruned <- prune(RT1.cv, cp = RT1.cv$cptable[which.min(RT1.cv$cptable[,"xerror"]),"CP"])
prp(RT1.pruned, type = 1, extra = 1, split.font = 1, varlen = -10)
op <- par("mypar"=myvalue)
#Pruning the tree
par(resetpar())
#Pruning the tree
par(resetPar())
#Pruning the tree
op <- par(no.readonly = TRUE)
RT1.pruned <- prune(RT1.cv, cp = RT1.cv$cptable[which.min(RT1.cv$cptable[,"xerror"]),"CP"])
prp(RT1.pruned, type = 1, extra = 1, split.font = 1, varlen = -10)
par(op)
RT1.pruned <- prune(RT1.cv, cp = RT1.cv$cptable[which.min(RT1.cv$cptable[,"xerror"]),"CP"])
prp(RT1.pruned, type = 1, extra = 1, split.font = 1, varlen = -10)
#Pruning the tree
op <- par(no.readonly = TRUE)
par(op)
RT1.pruned <- prune(RT1.cv, cp = RT1.cv$cptable[which.min(RT1.cv$cptable[,"xerror"]),"CP"])
prp(RT1.pruned, type = 1, extra = 1, split.font = 1, varlen = -10)
par(mfrow=c(1,1))
RT1.pruned <- prune(RT1.cv, cp = RT1.cv$cptable[which.min(RT1.cv$cptable[,"xerror"]),"CP"])
prp(RT1.pruned, type = 1, extra = 1, split.font = 1, varlen = -10)
summary(RT1.pruned)
#Running validation dataset through the pruned tree
pruned.valid<-predict(RT1.pruned,validdf,type="vector")
RMSE(pruned.valid,validdf$Price)
#Making price as categorical response
TC$Binnedprice<-as.factor(as.numeric(cut(TC$Price,20)))
View(TC$Binnedprice)
TC_new<-TC[,-2]
set.seed(12345)
train.index2<-sample(row.names(TC_new),0.5*dim(TC_new)[1])
set.seed(111)
train.index2<-sample(row.names(TC_new),0.5*dim(TC_new)[1])
traindf2<-TC_new[train.index2,]
rem.index2<-setdiff(row.names(TC_new),train.index2)
remdf2<-TC_new[rem.index2,]
valid.index2<-sample(row.names(remdf2),0.3*dim(TC_new)[1])
validdf2<-TC_new[valid.index2,]
test.index2<-setdiff(row.names(remdf2),valid.index2)
testdf2<-TC_new[test.index2,]
CT<-rpart(Binnedprice~Age_08_04+KM+CNG+Diesel+Petrol+HP+Automatic+Doors+Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco+CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf2,method="class",control = rpart.control(maxdepth = 3))
printcp(CT)
CT<-rpart(Binnedprice~Age_08_04+KM+unlist(CNG)+unlist(Diesel)+unlist(Petrol)+HP+Automatic+
Doors+Quarterly_Tax+Mfr_Guarantee+Guarantee_Period+Airco+Automatic_airco
+CD_Player+Powered_Windows+Sport_Model+Tow_Bar,data=traindf2,method="class",control = rpart.control(maxdepth = 3))
printcp(CT)
prp(CT, type = 1, extra = 1, split.font = 1, varlen = -10)
summary(CT)
plot(CT,margin=0.07)
text(CT,cex=0.8)
plot(RT1,margin=0.07)
text(RT1,cex=0.8)
#Running model on new test data
new_test<-data.frame(Age_08_04=77,KM=117000,CNG=0,Diesel=0,Petrol=1,
HP=110,Automatic=0,Doors=5,Quarterly_Tax=100,
Mfr_Guarantee=0,Guarantee_Period=3,Airco=1,Automatic_airco=0,
CD_Player=0,Powered_Windows=0,Sport_Model=0,Tow_Bar=1)
predict(RT1,new_test)
predict(CT,new_test)
max(TC[which(TC_new$Binnedprice == 3),2])
min(TC[which(TC_new$Binnedprice == 3),2])
mean(TC[which(TC_new$Binnedprice == 3),2])
