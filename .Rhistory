install.packages("doBy")
library(doBy)
doBy::summaryBy(mpg+hp+wt~am,data = mtcars,FUN = mean())
doBy::summaryBy(mpg+hp+wt~am,data = mtcars,FUN = mean)
doBy::summaryBy(mpg+hp+wt~am,data = mtcars,FUN = mystats())
doBy::summaryBy(mpg+hp+wt~am,data = mtcars,FUN = mystats
doBy::summaryBy(mpg+hp+wt~am,data = mtcars,FUN = mystats)
doBy::summaryBy(mpg+hp+wt~am,data = mtcars,FUN = mystats)
doBy::summaryBy(mpg+hp+wt~am,data = mtcars,FUN = meam)
doBy::summaryBy(mpg+hp+wt~am,data = mtcars,FUN = mean)
doBy::summaryBy(mpg+hp+wt~am,data = mtcars,FUN = mystats)
aggregate(data,by = list(am = mtcars$am,cyl = mtcars$cyl),mean)
doBy::summaryBy(mpg+hp+wt~am,data = mtcars,FUN = mean)
aggregate(data,by = list(am = mtcars$am),mean)
psych::describeBy(data,list(am=mtcars$am))
psych::describe.by(data,list(am=mtcars$am))
dotplot(psych::describe.by(data,list(am=mtcars$am)))
dotplot(psych::describe.by(data,list(am=mtcars$am)))
boxplot(psych::describe.by(data,list(am=mtcars$am)))
boxplot(describeBy(data,list(am=mtcars$am)))
library(vcd)
Arthritis
head(Arthritis)
head(Arthritis)
head(sort(Arthritis))
head(sort(Arthritis,x = Arthritis$id))
head(sort(Arthritis,x = Arthritis$ID))
head(sort(Arthritis,x = Arthritis$ID,decreasing = TRUE))
head(sort(Arthritis,Arthritis$ID,decreasing = TRUE))
head(order(Arthritis,Arthritis$ID,decreasing = TRUE))
head(order(Arthritis))
Arthritis[order(ID)]
Arthritis[order(ID),]
Arthritis[order(Arthritis$ID),]
Arthritis[,order(Arthritis$ID)]
Arthritis[order(Arthritis$ID),]
Arthritis[1,2]
Arthritis[1:5,2]
Arthritis[1:5,]
head(Arthritis)
head(Arthritis)
table(Arthritis$Improved)
prop.table(Arthritis$Improved)
prop.table(table(Arthritis$Improved)
prop.table(table(Arthritis$Improved))
prop.table(table(Arthritis$Improved))
table(Arthritis$Improved)
prop.table(table(Arthritis$Improved))
head(Arthritis)
table(Arthritis$Improved)
prop.table(table(Arthritis$Improved))
prop.table(table(Arthritis$Improved))*100
table(Arthritis$Improved,Arthritis$Sex)
xtabs(~Arthritis$Improved,Arthritis$Sex)
xtabs(~Arthritis$Improved+Arthritis$Sex)
prop.table(xtabs(~Arthritis$Improved+Arthritis$Sex))
prop.table(xtabs(~Arthritis$Improved+Arthritis$Sex))*100
margin.table((Arthritis$Improved)
margin.table(Arthritis$Improved)
margin.table(Arthritis$Improved)
margin.table(table(Arthritis$Improved,Arthritis$Sex))
prop.table(xtabs(~Arthritis$Improved+Arthritis$Sex))*100
margin.table(prop.table(xtabs(~Arthritis$Improved+Arthritis$Sex)))
margin.table(prop.table(xtabs(~Arthritis$Improved+Arthritis$Sex)),1)
margin.table(table(Arthritis$Improved),1)
margin.table(table(Arthritis$Treatment),1)
margin.table(table(Arthritis$Treatment),2)
prop.table(xtabs(~Arthritis$Improved+Arthritis$Sex))*100
addmargins(prop.table(xtabs(~Arthritis$Improved+Arthritis$Sex))*100)
addmargins(prop.table(xtabs(~Arthritis$Improved+Arthritis$Sex))*100)
addmargins(prop.table(xtabs(~Arthritis$Improved+Arthritis$Sex))*100,1)
addmargins(prop.table(xtabs(~Arthritis$Improved+Arthritis$Sex))*100,2)
library(gmodels)
CrossTable(Arthritis$Treatment,Arthritis$Improved)
table(Arthritis$Treatment,Arthritis$Sex,Arthritis$Improved)
xtabs(~Arthritis$Treatment+Arthritis$Sex+Arthritis$Improved)
addmargins(xtabs(~Arthritis$Treatment+Arthritis$Sex+Arthritis$Improved))
ftable(addmargins(xtabs(~Arthritis$Treatment+Arthritis$Sex+Arthritis$Improved)))
ftable(addmargins(prop.table(table(table(Arthritis$Treatment,Arthritis$Sex,Arthritis$Improved)))))
ftable(addmargins(prop.table(table(Arthritis$Treatment,Arthritis$Sex,Arthritis$Improved)))))
ftable(addmargins(prop.table(table(Arthritis$Treatment,Arthritis$Sex,Arthritis$Improved))))
chisq.test(xtabs(~Arthritis$Treatment+Arthritis$Sex))
chisq.test(xtabs(~Arthritis$Treatment+Arthritis$Improved))
chisq.test(xtabs(~Arthritis$Treatment+Arthritis$Improved+Arthritis$Sex))
chisq.test(xtabs(~Arthritis$Treatment+Arthritis$Sex))
fisher.test(xtabs(~Arthritis$Treatment+Arthritis$Sex))
chisq.test(xtabs(~Arthritis$Treatment+Arthritis$Sex))
fisher.test(xtabs(~Arthritis$Treatment+Arthritis$Sex))
fisher.test(xtabs(~Arthritis$Treatment+Arthritis$Improved))
mantelhaen.test(xtabs(~Arthritis$Treatment+Arthritis$Improved))
mantelhaen.test(xtabs(~Arthritis$Treatment+Arthritis$Improved+Arthritis$Se
x))
mantelhaen.test(xtabs(~Arthritis$Treatment+Arthritis$Improved+Arthritis$Sex))
assocstats(xtabs(~Arthritis$Treatment+Arthritis$Sex))
state.x77
state
state.x55
state.x77
help(state.x77)
head(state.x77)
cor(state.x77)
cor(state.x77[,1:6])
cor(state.x77[,1:6],method = "spearman")
state.x77[,2]
state.x77[,c("alabama","alaska")]
state.x77[,c("population","income")]
state.x77[,c("Population","Income")]
state.x77[1:2,c("Population","Income")]
x<-state.x77[,c("Population", "Income", "Illiteracy", "HS Grad")]
y <- state.x77[,c("Life Exp", "Murder")]
cor(x,y)
library(ggm)
install.packages("ggm")
library(ggm)
pcor(c(1,5,2,3,6),cov(state.x77))
corr.test(states.x77)
corr.test(state.x77)
corr.test(state.x77,use = "pairwise")
corr.test(state.x77,use = "complete")
install.packages("MASS")
install.packages("MASS")
library(MASS)
head(UScrime)
library(MASS)
head(UScitiesD)
head(USAccDeaths)
install.package("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
library(MASS)
library(MASS)
#loding the data and viewing.
a_train<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\LogTrainingSet.csv")
sum(is.na(a_train))
#change the numerical to factor
a_train$SEX<-as.factor(a_train$SEX)
a_train$EDUCATION<-as.factor(a_train$EDUCATION)
a_train$MARRIAGE<-as.factor(a_train$MARRIAGE)
#creating dummy variables for sex,education and marriage
dummy_cat<-fastDummies::dummy_cols(a_train[3:5])
head(dummy_cat[4:13])
#adding the dummies to the dataframe and removing orginal
#and creating a new df with dummies(wd)
a_train_wd<-cbind(a_train[-3:-5],dummy_cat[4:13])
#check for correlation
colnames(a_train_wd)
cor(as.matrix(a_train_wd$default.payment.next.month)
,as.matrix(a_train_wd[-22]))
head(a_train_wd[-10:-15])
#Multiple linear regression without interaction
a_MLR<-lm(default.payment.next.month ~ LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT4+PAY_AMT5+
PAY_AMT6+SEX_2+SEX_1+EDUCATION_2+EDUCATION_1+EDUCATION_3+
EDUCATION_4+EDUCATION_0+MARRIAGE_1+MARRIAGE_2+MARRIAGE_3,
data = a_train_wd)
summary(a_MLR)
a_MLRWI<-lm(default.payment.next.month ~ LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1:PAY_AMT2+PAY_AMT3:PAY_AMT4+PAY_AMT5:
PAY_AMT6+SEX_2+SEX_1+
EDUCATION_2+EDUCATION_1+
EDUCATION_3+
EDUCATION_4+EDUCATION_0+MARRIAGE_1+MARRIAGE_2+MARRIAGE_3,
data = a_train_wd)
summary(a_MLRWI)
#perform regression Diagnostics
Confint(a_MLR)
library(car)
library(gvlma)
library(MASS)
library(leaps)
library(bootstrap)
#loding the data and viewing.
a_train<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\LogTrainingSet.csv")
#plot
plot(a_MLR)
#plot
par(mfrow=c(2,2))
plot(a_MLR)
plot(a_MLRWI)
plot(a_MLR)
## Normality ##
## Enhanced Q-Q Pl
View(a_train_wd)
## Normality ##
## Enhanced Q-Q Plot ##
qqPlot(a_MLR,labels = row.names(a_train_wd),id.method="identity",simulate = TRUE,
main="Linear Regression model Q-Q plot")
## Normality ##
## Enhanced Q-Q Plot ##
qqPlot(a_MLR,labels = row.names(a_train_wd),id.method="identity",simulate = TRUE,main="Linear Regression model Q-Q plot")
## Normality ##
## Enhanced Q-Q Plot ##
par(mfrow=c(1,1))
qqPlot(a_MLR,labels = row.names(a_train_wd),id.method="identity",simulate = TRUE,main="Linear Regression model Q-Q plot")
qqPlot(a_MLRWI,labels = row.names(a_train_wd),id.method="identity",simulate = TRUE,main="Linear Regression model Q-Q plot")
#Studentized Residuals Distribution
residPlot = function(fit, nbreaks = 10){
z = rstudent(fit)
hist(z, breaks = nbreaks, freq = FALSE, xlab = "Studentized Residual", main = "Distribution of Errors")
rug(jitter(z), col="brown")
curve(dnorm(x, mean=mean(z), sd=sd(z)), add=TRUE, col="blue", lwd=2)
lines(density(z)$x, density(z)$y, col="red", lwd=2, lty=2)
legend("topright", legend = c("Normal Curve", "Kernel Density Curve"), lty = 1:2, col=c("blue", "red"), cex=.7 )
}
residPlot(a_MLR)
residPlot(a_MLRWI)
#loding the data and viewing.
a_train<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\TrainingSet.csv")
sum(is.na(a_train))
#change the numerical to factor
a_train$SEX<-as.factor(a_train$SEX)
a_train$EDUCATION<-as.factor(a_train$EDUCATION)
a_train$MARRIAGE<-as.factor(a_train$MARRIAGE)
#creating dummy variables for sex,education and marriage
dummy_cat<-fastDummies::dummy_cols(a_train[3:5])
#adding the dummies to the dataframe and removing orginal
#and creating a new df with dummies(wd)
a_train_wd<-cbind(a_train[-3:-5],dummy_cat[4:13])
View(a_train_wd)
head(dummy_cat[4:13])
#check for correlation
colnames(a_train_wd)
cor(as.matrix(a_train_wd$default.payment.next.month)
,as.matrix(a_train_wd[-22]))
head(a_train_wd[-10:-15])
#Multiple linear regression without interaction
a_MLR<-lm(default.payment.next.month ~ LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT4+PAY_AMT5+
PAY_AMT6+SEX_2+SEX_1+EDUCATION_2+EDUCATION_1+EDUCATION_3+
EDUCATION_4+EDUCATION_0+MARRIAGE_1+MARRIAGE_2+MARRIAGE_3,
data = a_train_wd)
a_MLRWI<-lm(default.payment.next.month ~ LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1:PAY_AMT2+PAY_AMT3:PAY_AMT4+PAY_AMT5:
PAY_AMT6+SEX_2+SEX_1+
EDUCATION_2+EDUCATION_1+
EDUCATION_3+
EDUCATION_4+EDUCATION_0+MARRIAGE_1+MARRIAGE_2+MARRIAGE_3,
data = a_train_wd)
summary(a_MLR)
#perform regression Diagnostics
Confint(a_MLR)
summary(a_MLRWI)
Confint(a_MLRWI)
#plot
par(mfrow=c(2,2))
plot(a_MLR)
plot(a_MLRWI)
# Normality
# Enhanced Q-Q Plot
par(mfrow=c(1,1))
qqPlot(a_MLR,labels = row.names(a_train_wd),id.method="identity",simulate = TRUE,main="Linear Regression model Q-Q plot")
qqPlot(a_MLRWI,labels = row.names(a_train_wd),id.method="identity",simulate = TRUE,main="Linear Regression model Q-Q plot")
#Studentized Residuals Distribution
residPlot = function(fit, nbreaks = 10){
z = rstudent(fit)
hist(z, breaks = nbreaks, freq = FALSE, xlab = "Studentized Residual", main = "Distribution of Errors")
rug(jitter(z), col="brown")
curve(dnorm(x, mean=mean(z), sd=sd(z)), add=TRUE, col="blue", lwd=2)
lines(density(z)$x, density(z)$y, col="red", lwd=2, lty=2)
legend("topright", legend = c("Normal Curve", "Kernel Density Curve"), lty = 1:2, col=c("blue", "red"), cex=.7 )
}
residPlot(a_MLR)
residPlot(a_MLRWI)
qqPlot(a_MLR,labels = row.names(a_train_wd),id.method="identity",simulate = TRUE,main="Linear Regression model Q-Q plot")
qqPlot(a_MLRWI,labels = row.names(a_train_wd),id.method="identity",simulate = TRUE,main="Linear Regression model Q-Q plot")
durbinWatsonTest(Model_LR)
durbinWatsonTest(a_MLR)
durbinWatsonTest(a_MLRWI)
## Linearity ##
## Component plus residual plots ##
crPlots(a_MLR)
## Homoscedasticity ##
## Non-constant variance test & spread level plot ##
ncvTest(Model_LR)
## Homoscedasticity ##
## Non-constant variance test & spread level plot ##
ncvTest(a_MLR)
spreadLevelPlot(a_MLR)
ncvTest(a_MLRWI)
spreadLevelPlot(a_MLRWI)
library(car)
library(gvlma)
library(MASS)
library(leaps)
library(bootstrap)
#loding the data and viewing.
a_train<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\TrainingSet.csv")
View(a_train)
sum(is.na(a_train))
#change the numerical to factor
a_train$SEX<-as.factor(a_train$SEX)
a_train$EDUCATION<-as.factor(a_train$EDUCATION)
a_train$MARRIAGE<-as.factor(a_train$MARRIAGE)
#creating dummy variables for sex,education and marriage
dummy_cat<-fastDummies::dummy_cols(a_train[3:5])
head(dummy_cat[4:13])
#adding the dummies to the dataframe and removing orginal
#and creating a new df with dummies(wd)
a_train_wd<-cbind(a_train[-3:-5],dummy_cat[4:13])
View(a_train_wd)
install.packages("C50")
library(C50)
a_valid<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\ValidationSet.csv")
library(car)
library(gvlma)
library(MASS)
library(leaps)
library(bootstrap)
#loding the data and viewing.
a_train<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\TrainingSet.csv")
a_valid<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\ValidationSet.csv")
#change the numerical to factor
a_train$SEX<-as.factor(a_train$SEX)
a_train$EDUCATION<-as.factor(a_train$EDUCATION)
a_train$MARRIAGE<-as.factor(a_train$MARRIAGE)
a_valid$SEX<-as.factor(a_valid$SEX)
a_valid$EDUCATION<-as.factor(a_valid$EDUCATION)
a_valid$MARRIAGE<-as.factor(a_valid$MARRIAGE)
#creating dummy variables for sex,education and marriage
dummy_cat<-fastDummies::dummy_cols(a_train[3:5])
head(dummy_cat[4:13])
dummy_cat_v<-fastDummies::dummy_cols(a_valid[3:5])
head(dummy_cat_v[4:13])
#adding the dummies to the dataframe and removing orginal
#and creating a new df with dummies(wd)
a_train_wd<-cbind(a_train[-3:-5],dummy_cat[4:13])
View(a_train_wd)
a_valid_wd<-cbind(a_calid[-3:-5],dummy_cat_v[4:13])
View(a_valid_wd)
a_valid_wd<-cbind(a_aalid[-3:-5],dummy_cat_v[4:13])
a_valid_wd<-cbind(a_valid[-3:-5],dummy_cat_v[4:13])
View(a_valid_wd)
library(C50)
#running a regression tree
set.seed(123)
View(a_train_wd)
colnames(a_train_wd)
RT1<-rpart(efault.payment.next.month ~ LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT4+PAY_AMT5+
PAY_AMT6+SEX_2+SEX_1+EDUCATION_2+EDUCATION_1+EDUCATION_3+
EDUCATION_4+EDUCATION_0+MARRIAGE_1+MARRIAGE_2+MARRIAGE_3,
data = a_train_wd )
library(caret)
library(lattice)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(tree)
library(gmodels)
library(RColorBrewer)
RT1<-rpart(efault.payment.next.month ~ LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT4+PAY_AMT5+
PAY_AMT6+SEX_2+SEX_1+EDUCATION_2+EDUCATION_1+EDUCATION_3+
EDUCATION_4+EDUCATION_0+MARRIAGE_1+MARRIAGE_2+MARRIAGE_3,
data = a_train_wd )
RT1<-rpart(default.payment.next.month ~ LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT4+PAY_AMT5+
PAY_AMT6+SEX_2+SEX_1+EDUCATION_2+EDUCATION_1+EDUCATION_3+
EDUCATION_4+EDUCATION_0+MARRIAGE_1+MARRIAGE_2+MARRIAGE_3,
data = a_train_wd )
print(RT1)
RT1<-rpart(default.payment.next.month ~ LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT4+PAY_AMT5+
PAY_AMT6+SEX_2+SEX_1+EDUCATION_2+EDUCATION_1+EDUCATION_3+
EDUCATION_4+EDUCATION_0+MARRIAGE_1+MARRIAGE_2+MARRIAGE_3,
data = a_train_wd,
method="anova",control = rpart.control(maxdepth = 3))
print(RT1)
summary(RT1)
prp(RT1, type = 1, extra = 1, split.font = 1, varlen = -10)
plotcp(RT1)
RT1.pred<-predict(RT1,a_train_wd,type="vector")
RT1.valid<-predict(RT1,a_valid_wd,type="vector")
RMSE(RT1.pred,a_train_wd$default.payment.next.month)
RMSE(RT1.pred,a_valid_wd$default.payment.next.month)
RT1.valid`
RT1.valid
RT1.valid
RMSE(RT1.valid,a_valid_wd$default.payment.next.month)
View(a_train_wd$default.payment.next.month)
vire(RT1.pred)
View(RT1.pred)
length(RT1.pred[RT1.pred>0.5])
length(RT1.pred)
hist(RT1.pred)
dotplot(RT1.pred)
dotchart(RT1.pred)
par(mfrow=c(1,3))
par(mfrow=c(1,2))
boxplot(RT1.pred-a_train_wd$default.payment.next.month,main="Boxplot for training data error")
boxplot(RT1.valid-a_valid_wd$default.payment.next.month,main="Boxplot for validation data error")
par(mfrow=c(1,1))
RT1.cv<-rpart(default.payment.next.month ~ LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT4+PAY_AMT5+
PAY_AMT6+SEX_2+SEX_1+EDUCATION_2+EDUCATION_1+EDUCATION_3+
EDUCATION_4+EDUCATION_0+MARRIAGE_1+MARRIAGE_2+MARRIAGE_3,
data=a_train_wd,method="anova",cp=0.00001,minsplit=2,xval=5)
printcp(RT1.cv)
RT1.pruned<-prune(RT1.cv, cp = RT1.cv$cptable[which.min(RT1.cv$cptable[,"xerror"]),"CP"])
prp(RT1.pruned, type = 1, extra = 1, split.font = 1, varlen = -10)
pruned.valid<-predict(RT1.pruned,validdf,type="vector")
pruned.valid<-predict(RT1.pruned,a_train_wd,type="vector")
RMSE(pruned.valid,a_valid_wd$default.payment.next.month)
#Making price as categorical response
TC$Binnedprice<-as.factor(as.numeric(cut(TC$default.payment.next.month,5)))
#Making price as categorical response
TC<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\TrainingSet.csv")
TC$Binnedprice<-as.factor(as.numeric(cut(TC$default.payment.next.month,5)))
TC$binneddefault<-as.factor(as.numeric(cut(TC$default.payment.next.month,5)))
View(TC$binneddefault)
#loading CSV file
TC<-read.csv("ToyotaCorolla_csv_data.csv")
setwd("C:/Users/ashwi/Desktop/Ashwin/Data_mining_Concepts")
#loading CSV file
TC<-read.csv("ToyotaCorolla_csv_data.csv")
#Making price as categorical response
TC$Binnedprice<-as.factor(as.numeric(cut(TC$Price,20)))
View(TC$Binnedprice)
TC_new<-TC[,-2]
View(TC_new)
View(TC)
#Making price as categorical response
TC<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\TrainingSet.csv")
TC$binneddefault<-as.factor(as.numeric(cut(TC$default.payment.next.month,5)))
set.seed(123)
CT<-rpart(binneddefault~LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT4+PAY_AMT5+
PAY_AMT6+SEX_2+SEX_1+EDUCATION_2+EDUCATION_1+EDUCATION_3+
EDUCATION_4+EDUCATION_0+MARRIAGE_1+MARRIAGE_2+MARRIAGE_3,data = TC,
method="class",control = rpart.control(maxdepth = 3))
colnames(TC)
TC$SEX<-as.factor(TC$SEX)
TC$EDUCATION<-as.factor(TC$EDUCATION)
TC$MARRIAGE<-as.factor(TC$MARRIAGE)
set.seed(123)
colnames(TC)
CT<-rpart(binneddefault~LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT4+PAY_AMT5+
PAY_AMT6+SEX+EDUCATION+
MARRIAGE,data = TC,
method="class",control = rpart.control(maxdepth = 3))
print(CT)
prp(CT, type = 1, extra = 1, split.font = 1, varlen = -10)
plot(CT,margin=0.07)
text(CT,cex=0.8)
plot(RT1,margin=0.07)
text(RT1,cex=0.8)
#Running model on validation data
TC_valid<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\ValidationSet.csv")
#Running model on validation data
TC_valid<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\ValidationSet.csv")
TC_valid$SEX<-as.factor(TC_valid$SEX)
TC_valid$EDUCATION<-as.factor(TC_valid$EDUCATION)
TC_valid$MARRIAGE<-as.factor(TC_valid$MARRIAGE)
predict(CT1,TC_valid)
predict(CT,TC_valid)
predict(RT1,TC_valid)
predict(RT1,a_valid_wd)
library(caret)
library(lattice)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(tree)
library(gmodels)
library(RColorBrewer)
#loding the data and viewing.
a_train<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\TrainingSet.csv")
a_valid<-read.csv("C:\\Users\\ashwi\\Desktop\\Project\\ValidationSet.csv")
#change the numerical to factor
a_train$SEX<-as.factor(a_train$SEX)
a_train$EDUCATION<-as.factor(a_train$EDUCATION)
a_train$MARRIAGE<-as.factor(a_train$MARRIAGE)
logit.class<-glm(default.payment.next.month ~LIMIT_BAL+AGE+PAY_0+PAY_2+PAY_3+
PAY_4+PAY_5+PAY_6+PAY_AMT1+PAY_AMT2+PAY_AMT3+PAY_AMT4+PAY_AMT5+
PAY_AMT6+SEX+EDUCATION+
MARRIAGE,
family=binomial(link="logit"),data=a_train)
summary(logit.class)
plot(logit.class)
par(mfrow=c(2,2))
plot(logit.class)
logit<-predict.glm(logit.class,a_valid)
a_valid$SEX<-as.factor(a_valid$SEX)
a_valid$EDUCATION<-as.factor(a_valid$EDUCATION)
a_valid$MARRIAGE<-as.factor(a_valid$MARRIAGE)
logit<-predict.glm(logit.class,a_valid)
odds<-exp(logit)
odds
head(odds)
probability<-predict.glm(logit.class,test,type="response")
probability<-predict.glm(logit.class,a_valid,type="response")
probability
head(robability)
head(probability)
coefficients(logit.class)[3]
coefficients(logit.class)[1]
p <-ifelse(logit.class$fitted.values >= 0.5,0,1)
table(p, a_train$default.payment.next.month)
p <-ifelse(logit.class$fitted.values >= 0.9,0,1)
table(p, Banks$Financial.Condition)
table(p, a_train$default.payment.next.month)
p <-ifelse(logit.class$fitted.values >= 0.1,0,1)
table(p, a_train$default.payment.next.month)
p <-ifelse(logit.class$fitted.values >= 0,0,1)
table(p, a_train$default.payment.next.month)
table(p, a_train$default.payment.next.month)
p <-ifelse(logit.class$fitted.values >= 0.03,0,1)
table(p, a_train$default.payment.next.month)
